function unittest {
    Write-Host "--------------------------------------UNITTEST-----------------------------------"
    python -m coverage run --source=. -m unittest discover -s ./tests
    Write-Host "---------------------------------------------------------------------------------"
}

function coverage {
    $COVERAGE_LIMIT = 50 # As in push CI
    Write-Host "--------------------------------------COVERAGE-----------------------------------"
    python -m coverage report --fail-under=$COVERAGE_LIMIT -m
    Write-Host "---------------------------------------------------------------------------------"
}

function isort {
    Write-Host "--------------------------------------ISORT--------------------------------------"
    python -m isort ./src --diff --line-length 120 --check
    Write-Host "---------------------------------------------------------------------------------"
}

function black {
    Write-Host "--------------------------------------BLACK--------------------------------------"
    python -m black ./src --diff --line-length 120 --color
    Write-Host "---------------------------------------------------------------------------------"
}

function pylint {
    Write-Host "--------------------------------------PYLINT-------------------------------------"
    python -m pylint ./src
    Write-Host "---------------------------------------------------------------------------------"
}

function activate {
    .\venv\Scripts\Activate
}

function help {
    Write-Host "usage: .\local_ci.ps1 [-h] [-t] [-c] [-i] [-b] [-p] [-a]"
    Write-Host
    Write-Host "Check changed code before pushing"
    Write-Host
    Write-Host "arguments:"
    Write-Host "  -h     show this help message and exit"
    Write-Host "  -t     run unittest"
    Write-Host "  -c     run coverage utility"
    Write-Host "  -i     run isort"
    Write-Host "  -b     run black"
    Write-Host "  -p     run pylint"
    Write-Host "  -a     run all checks"
    Write-Host
}

if ($args.Count -lt 1) {
    Write-Host "No options found!"
    exit 1
}

activate

while ($args) {
    switch ($args[0]) {
        "-t" { unittest }
        "-c" { coverage }
        "-i" { isort }
        "-b" { black }
        "-p" { pylint }
        "-a" { unittest; coverage; isort; black; pylint }
        "-h" { help; exit }
        default {
            Write-Host "Error: Invalid option"
            exit 1
        }
    }
    $args = $args[1..$($args.Count-1)]
}
